/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { Html, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useTooltipContext } from "@/contexts/TooltipContext";
import Tooltip from "../Tooltip";

const filePath = "/3d/bed.glb";

useGLTF.preload(filePath);

type GLTFResult = GLTF & {
  nodes: {
    Sheets: THREE.Mesh;
    BedFrame: THREE.Mesh;
    Mattress: THREE.Mesh;
    Pillow1: THREE.Mesh;
    Pillow2: THREE.Mesh;
  };
  materials: {
    BrownColor: THREE.MeshStandardMaterial;
    Walls: THREE.MeshStandardMaterial;
    SheetsColor: THREE.MeshStandardMaterial;
    YellowColor: THREE.MeshStandardMaterial;
  };
};

const Bed = (props: JSX.IntrinsicElements["group"]) => {
  const { currentStage } = useTooltipContext();

  const { nodes, materials } = useGLTF(filePath) as GLTFResult;

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sheets.geometry}
        material={materials.SheetsColor}
        position={[-0.85, -1.175, -0.415]}
        scale={[0.938, 1, 0.985]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BedFrame.geometry}
          material={materials.BrownColor}
          position={[0.852, -0.126, 1.302]}
          scale={[0.996, 1, 0.996]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mattress.geometry}
          material={materials.Walls}
          position={[0.001, -0.007, 0.001]}
          scale={[1.018, 1, 1.018]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Pillow1.geometry}
          material={materials.SheetsColor}
          position={[0.009, 0.135, -0.92]}
          rotation={[0.418, 0, 0]}
          scale={[0.71, 0.139, 0.443]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Pillow2.geometry}
          material={materials.YellowColor}
          position={[-0.266, 0.164, -0.502]}
          rotation={[0.33, 0.483, 0.022]}
          scale={[0.515, 0.133, 0.344]}
        />
        <Html
          rotation-x={-Math.PI / 2}
          rotation-z={Math.PI / 2}
          position={[0.2, 0, 0.7]}
          transform
        >
          <Tooltip currentStage={currentStage} />
        </Html>
      </mesh>
    </group>
  );
};

export default Bed;
